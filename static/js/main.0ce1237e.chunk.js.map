{"version":3,"sources":["components/Task/UI/TitleField.js","components/Task/UI/CategoryChip.js","components/Task/UI/CategoryField.js","components/Task/UI/DescriptionField.js","components/Task/CreateTaskModal.js","hoc/Layout.js","store/actions/task.js","store/actions/actionTypes.js","containers/auth/Auth.js","graphql/queries.js","components/Task/Task.js","containers/task-board/task-board-column/TaskBoardColumn.js","containers/task-board/TaskBoard.js","graphql/client.js","App.js","store/reducers/taskReducer.js","serviceWorker.js","theme.js","index.js"],"names":["useStyles","makeStyles","resize","fontSize","TitleField","props","classes","isEdit","TextField","id","onChange","event","setTitle","target","value","required","fullWidth","label","title","InputProps","input","showError","FormHelperText","error","data-cy","Box","display","Typography","align","variant","IconButton","onClick","setIsEdit","CategoryChip","Chip","className","style","backgroundColor","color","size","CategoryField","category","setCategory","categories","filter","createFilterOptions","Autocomplete","newValue","inputValue","filterOptions","options","params","filtered","push","selectOnFocus","clearOnBlur","handleHomeEndKeys","getOptionLabel","option","renderOption","renderInput","freeSolo","DescriptionField","description","setDescription","multiline","rows","gutterBottom","theme","modal","alignItems","justifyContent","content","palette","background","paper","border","boxShadow","shadows","padding","spacing","actions","margin","CreateTaskModal","onSave","open","onClose","React","useState","Modal","aria-labelledby","aria-describedby","disableBackdropClick","disableEscapeKeyDown","onRendered","onSubmit","preventDefault","autoComplete","Button","startIcon","type","connect","state","dispatch","onTaskAdded","root","flexGrow","menuButton","marginRight","auth","marginLeft","setOpen","AppBar","position","Toolbar","to","edge","aria-label","children","Auth","INIT_STATES","gql","Task","task","setShowError","shadowColors","useDrag","item","collect","monitor","opacity","isDragging","dragRef","maxWidth","card","cardActions","width","cardAction","CreatedLabel","marginInlineStart","dragIcon","cursor","titleField","categoryField","descriptionField","actionFields","updatedTask","moveTask","Container","ref","Card","CardHeader","action","subheader","moment","createdAt","fromNow","CardContent","CardActions","TaskBoardColumn","column","flexFlow","minHeight","header","body","flex","useDrop","accept","drop","data","mon","isOver","tasks","map","key","reduce","arr","el","concat","Grid","xs","borderRight","borderBottom","borderLeft","borderTop","states","onTaskMoved","taskId","newState","onSaved","initStates","useQuery","loading","useEffect","columns","index","t","name","length","CircularProgress","container","client","ApolloClient","uri","process","App","path","exact","component","TaskBoard","initialState","categoriesColors","reducer","updatedTasks","newCategory","newTask","Math","random","_","newCat","Boolean","window","location","hostname","match","createMuiTheme","primary","deepOrange","secondary","main","store","createStore","taskReducer","app","DndProvider","backend","HTML5Backend","basename","responsiveFontSizes","CssBaseline","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.0ce1237e.chunk.js","sourcesContent":["import React from \"react\";\nimport {\n  TextField,\n  Box,\n  Typography,\n  IconButton,\n  FormHelperText,\n  makeStyles,\n} from \"@material-ui/core\";\nimport EditIcon from \"@material-ui/icons/Edit\";\n\nconst useStyles = makeStyles({\n  resize: {\n    fontSize: 35,\n  },\n});\nconst TitleField = (props) => {\n  const classes = useStyles();\n\n\n  const handleTitleChange = (event) => {\n    props.setTitle(event.target.value);\n  };\n\n  return props.isEdit ? (\n    <div>\n    <TextField\n      id=\"task-input-title\"\n      onChange={handleTitleChange}\n      required\n      fullWidth\n      label=\"Title\"\n      value={props.title}\n      InputProps={{\n        classes: {\n          input: classes.resize,\n        },\n      }}\n    />\n    {props.showError ? <FormHelperText error data-cy=\"title-error-text\">Title is a required field.</FormHelperText> : null}\n    </div>\n  ) : (\n    <Box display=\"flex\">\n      <Typography align=\"left\" data-cy=\"task-title\" variant=\"h4\">\n        {props.title}\n      </Typography>\n      <IconButton data-cy=\"edit\" onClick={() => props.setIsEdit(true)}>\n        <EditIcon />\n      </IconButton>\n    </Box>\n  );\n};\n\nexport default TitleField;\n","import React from 'react'\nimport { Chip } from '@material-ui/core';\n\nconst CategoryChip = (props) => {\n    return ( <Chip className='task-category' label={props.title} style={{ backgroundColor: props.color } } size='small'/> )\n}\n \nexport default CategoryChip","import React from 'react';\nimport Autocomplete, { createFilterOptions } from '@material-ui/lab/Autocomplete'\n\nimport CategoryChip from \"./CategoryChip\";\nimport { TextField } from '@material-ui/core';\n\nconst CategoryField = ({isEdit, category, setCategory, categories}) => {\n\n\n    const filter = createFilterOptions()\n\n    return isEdit ? (\n      <Autocomplete\n        id=\"modal-category\"\n        fullWidth\n        value={category}\n        onChange={(event, newValue) => {\n          // Create a new value from the user input\n          if (newValue && newValue.inputValue) {\n            setCategory({\n              title: newValue.inputValue,\n            });\n\n            return;\n          }\n\n          setCategory(newValue);\n        }}\n        filterOptions={(options, params) => {\n          const filtered = filter(options, params);\n\n          // Suggest the creation of a new value\n          if (params.inputValue !== \"\") {\n            filtered.push({\n              inputValue: params.inputValue,\n              title: `Add \"${params.inputValue}\"`,\n            });\n          }\n\n          return filtered;\n        }}\n        selectOnFocus\n        clearOnBlur\n        handleHomeEndKeys\n        options={categories}\n        getOptionLabel={(option) => {\n          // Value selected with enter, right from the input\n          if (typeof option === \"string\") {\n            return option;\n          }\n          // Add \"xxx\" option created dynamically\n          if (option.inputValue) {\n            return option.inputValue;\n          }\n          // Regular option\n          return option.title;\n        }}\n        renderOption={(option) => (\n          <CategoryChip\n            id={option.title}\n            title={option.title}\n            color={option.color}\n          />\n        )}\n        renderInput={(params) => <TextField {...params} label=\"Category\" />}\n        freeSolo\n      />\n    ) : category ? (\n      <CategoryChip title={category.title} color={category.color} />\n    ) : null;\n}\n \nexport default CategoryField;","import React from \"react\";\nimport { Typography, TextField } from \"@material-ui/core\";\n\nconst DescriptionField = ({ isEdit, description, setDescription }) => {\n  const handleDescritionChange = (event) => {\n    setDescription(event.target.value);\n  };\n\n  return isEdit ? (\n    <TextField\n      id=\"task-input-description\"\n      label=\"Description\"\n      multiline\n      fullWidth\n      value={description}\n      onChange={handleDescritionChange}\n      rows={4}\n    />\n  ) : (\n    <Typography className=\"task-description\" variant=\"body2\" gutterBottom>\n      {description}\n    </Typography>\n  );\n};\n\nexport default DescriptionField;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { Modal, makeStyles, Button } from '@material-ui/core'\nimport SaveIcon from '@material-ui/icons/Save'\nimport CloseIcon from '@material-ui/icons/Close'\n\nimport TitleField from './UI/TitleField'\nimport CategoryField from './UI/CategoryField'\nimport DescriptionField from './UI/DescriptionField'\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  content: {\n    backgroundColor: theme.palette.background.paper,\n    border: '2px solid #000',\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3)\n  },\n  actions: {\n    display: 'flex',\n    margin: theme.spacing(4, 0, 0),\n    justifyContent: 'space-between'\n  }\n}))\n\nconst CreateTaskModal = ({ onSave, open, onClose, categories }) => {\n  const classes = useStyles()\n  const [title, setTitle] = React.useState('')\n  const [description, setDescription] = React.useState()\n  const [category, setCategory] = React.useState(null);\n\n  const handleSubmit = (event) => {\n    event.preventDefault()\n    onSave(title, category, description)\n  }\n\n  const resetFields = () => {\n    setTitle('')\n    setCategory(null)\n  }\n\n  return (\n    <Modal\n      id='create-task-modal'\n      className={classes.modal}\n      open={open}\n      aria-labelledby='modal-title'\n      aria-describedby='modal-body'\n      disableBackdropClick\n      disableEscapeKeyDown\n      onRendered={resetFields}\n      onClose={onClose}>\n      <form\n        className={classes.content}\n        onSubmit={handleSubmit}\n        autoComplete='off'>\n        <TitleField title={title} setTitle={setTitle} isEdit={true}/>\n        <CategoryField isEdit category={category} setCategory={setCategory} categories={categories}/>\n        <DescriptionField isEdit description={description} setDescription={setDescription}/>\n        <div id='modal-body' className={classes.actions} >\n          <Button\n            id='close-create-task-modal-button'\n            variant='outlined'\n            color='secondary'\n            size='small'\n            startIcon={<CloseIcon />}\n            onClick={onClose}>\n            CANCEL\n          </Button>\n          <Button\n            id='save-create-task-modal-button'\n            variant='outlined'\n            color='primary'\n            size='small'\n            type='submit'\n            startIcon={<SaveIcon />}>\n            SAVE\n          </Button>\n        </div>\n      </form>\n    </Modal>\n  )\n}\n\nCreateTaskModal.propTypes = {\n  onSave: PropTypes.func,\n  onClose: PropTypes.func,\n  open: PropTypes.bool,\n  categories: PropTypes.array\n}\n\nexport default CreateTaskModal\n","import React from 'react'\nimport { NavLink } from 'react-router-dom'\nimport { connect } from 'react-redux'\nimport PropTypes from 'prop-types'\n\nimport { Button, Typography, Toolbar, AppBar, makeStyles, IconButton } from '@material-ui/core'\n\nimport HomeIcon from '@material-ui/icons/Home'\nimport AddIcon from '@material-ui/icons/AddBoxOutlined'\nimport CreateTaskModal from '../components/Task/CreateTaskModal'\nimport * as actions from '../store/actions'\n\nconst Layout = (props) => {\n  const useStyles = makeStyles((theme) => ({\n    root: {\n      flexGrow: 1,\n    },\n    menuButton: {\n      marginRight: theme.spacing(2)\n    },\n    auth: {\n      marginLeft: 'auto'\n    }\n  }))\n\n  const [open, setOpen] = React.useState(false)\n\n  const handleOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const handleSave = (title, category, description) => {\n    props.onTaskAdded(title, category, description)\n    setOpen(false)\n  }\n\n  const classes = useStyles()\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\" >\n        <Toolbar>\n          <NavLink to=\"/\">\n            <IconButton edge=\"start\" className={classes.menuButton} aria-label=\"menu\">\n              <HomeIcon color=\"action\" />\n            </IconButton>\n          </NavLink>\n          <Typography variant=\"h6\" className={classes.title}>\n            Task-Board\n          </Typography>\n          <IconButton id='open-create-task-modal-button' onClick={handleOpen}>\n            <AddIcon />\n          </IconButton>\n          <NavLink to=\"/auth\" className={classes.auth}>\n            <Button >Login</Button>\n          </NavLink>\n        </Toolbar>\n      </AppBar>\n      <div>\n        {props.children}\n        {open ? <CreateTaskModal open={open} onClose={handleClose} onSave={handleSave}  categories={props.categories}/> : null }\n      </div>\n    </div>\n  )\n}\n\nLayout.propTypes = {\n  onTaskAdded: PropTypes.func,\n  taskTypes: PropTypes.array,\n  children: PropTypes.node\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    categories: state.categories\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onTaskAdded: (title, category, description) => dispatch(actions.addNew(title, category, description))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Layout)\n","import * as actionTypes from './actionTypes'\n\nexport const addNew = (title, category, description) => {\n  return {\n    type: actionTypes.TASK_ADD_NEW,\n    title: title,\n    category: category,\n    description: description\n  }\n}\n\nexport const moveTask = (id, newState) => {\n  return {\n    type: actionTypes.TASK_MOVE,\n    id: id,\n    newState: newState\n  }\n}\n\nexport const updateTask = (task) => {\n  return {\n    type: actionTypes.TASK_UPDATE,\n    task: task\n  }\n}\n\nexport const initStates = (states) => {\n  return {\n    type: actionTypes.INIT_STATES,\n    states: states\n  }\n}","export const TASK_ADD_NEW = 'TASK_ADD_NEW'\nexport const TASK_MOVE = 'TASK_MOVE'\nexport const TASK_UPDATE = 'TASK_UPDATE'\nexport const INIT_STATES = 'INIT_STATES'\n\n","import React from 'react'\n\nconst Auth = () => {\n  return (\n    <div>Auth</div>\n  )\n}\n\nexport default Auth\n","import { gql } from \"apollo-boost\";\n\nexport const INIT_STATES = gql`query initStates { states { id name index } }`;\n","import React from \"react\";\nimport {\n  Card,\n  CardContent,\n  Container,\n  makeStyles,\n  IconButton,\n  CardActions,\n  Box,\n  Button,\n  CardHeader,\n  Typography,\n} from \"@material-ui/core\";\nimport SaveIcon from \"@material-ui/icons/Save\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport DragIndicatorIcon from \"@material-ui/icons/DragIndicator\";\nimport { useDrag } from \"react-dnd\";\nimport ArrowLeft from \"@material-ui/icons/ArrowLeft\";\nimport ArrowRight from \"@material-ui/icons/ArrowRight\";\nimport PropTypes from \"prop-types\";\nimport moment from \"moment\";\n\nimport TitleField from \"./UI/TitleField\";\nimport CategoryField from \"./UI/CategoryField\";\nimport DescriptionField from \"./UI/DescriptionField\";\n\nconst Task = (props) => {\n  const [isEdit, setIsEdit] = React.useState(false);\n  const [title, setTitle] = React.useState(props.task.title);\n  const [category, setCategory] = React.useState(\n    props.task.category ? props.task.category : \"\"\n  );\n  const [description, setDescription] = React.useState(props.task.description);\n  const [showError, setShowError] = React.useState(false);\n\n  const shadowColors = [\n    \"rgb(242, 11, 11)\",\n    \"rgb(242, 119, 11)\",\n    \"rgb(242, 238, 11)\",\n    \"rgb(94, 242, 11)\",\n  ];\n\n  const [{ opacity }, dragRef] = useDrag({\n    item: { type: \"task\", id: props.task.id },\n    collect: (monitor) => ({\n      opacity: monitor.isDragging() ? 0.5 : 1,\n    }),\n  });\n\n  const useStyles = makeStyles({\n    root: {\n      padding: \"24px\",\n      maxWidth: \"250\",\n    },\n    card: {\n      boxShadow: `2px 2px 1px 1px ${\n        shadowColors[props.task.state]\n      },1px 1px 1px 1px ${shadowColors[props.task.state]},0px 1px 10px 1px ${\n        shadowColors[props.task.state]\n      }`,\n    },\n    cardActions: {\n      width: \"100%\",\n      justifyContent: \"space-between\",\n    },\n    cardAction: {\n      marginLeft: \"auto\",\n    },\n    CreatedLabel: {\n      marginInlineStart: \"8px\",\n    },\n    dragIcon: {\n      cursor: \"grab\",\n    },\n    resize: {\n      fontSize: 35,\n    },\n  });\n\n  const classes = useStyles();\n\n  const handleClose = () => {\n    setTitle(props.task.title);\n    setCategory(props.task.category);\n    setDescription(props.task.description);\n    setShowError(false);\n    setIsEdit(false);\n  };\n\n  const handleSave = () => {\n    if (title) {\n      const updatedTask = {\n        ...props.task,\n        title: title,\n        category: category,\n        description: description,\n      };\n      props.onSave(updatedTask);\n      setShowError(false)\n      setIsEdit(false);\n    } else {\n      setShowError(true)\n    }\n  };\n\n  var titleField = (\n    <TitleField\n      title={title}\n      setTitle={setTitle}\n      setIsEdit={setIsEdit}\n      isEdit={isEdit}\n      showError={showError}\n    />\n  );\n\n  var categoryField = (\n    <CategoryField\n      category={category}\n      setCategory={setCategory}\n      categories={props.categories}\n      isEdit={isEdit}\n    />\n  );\n\n  var descriptionField = (\n    <DescriptionField\n      isEdit={isEdit}\n      description={description}\n      setDescription={setDescription}\n    />\n  );\n\n  var actionFields = isEdit ? (\n    <Box display=\"flex\" className={classes.cardActions}>\n      <Button\n        id=\"close-create-task-modal-button\"\n        variant=\"outlined\"\n        color=\"secondary\"\n        size=\"small\"\n        onClick={handleClose}\n        startIcon={<CloseIcon />}\n      >\n        CANCEL\n      </Button>\n      <Button\n        id=\"save-create-task-modal-button\"\n        variant=\"outlined\"\n        color=\"primary\"\n        size=\"small\"\n        onClick={handleSave}\n        startIcon={<SaveIcon />}\n      >\n        SAVE\n      </Button>\n    </Box>\n  ) : (\n    <Box display=\"flex\" className={classes.cardActions}>\n      <IconButton\n        onClick={() => props.moveTask(props.task.id, props.task.state - 1)}\n        id=\"move-task-backward\"\n      >\n        <ArrowLeft />\n      </IconButton>\n      <IconButton\n        className={classes.cardAction}\n        onClick={() => props.moveTask(props.task.id, props.task.state + 1)}\n        id=\"move-task-forward\"\n      >\n        <ArrowRight />\n      </IconButton>\n    </Box>\n  );\n\n  return (\n    <Container className={classes.root} ref={dragRef} style={{ opacity }}>\n      <Card className={classes.card}>\n        <CardHeader\n          action={\n            isEdit ? null : <DragIndicatorIcon className={classes.dragIcon} />\n          }\n          title={titleField}\n          subheader={\n            <Box display=\"flex\">\n              {categoryField}\n              <Typography\n                className={classes.CreatedLabel}\n                variant=\"caption\"\n                display=\"block\"\n                gutterBottom\n              >\n                {isEdit ? null : moment(props.task.createdAt).fromNow()}\n              </Typography>\n            </Box>\n          }\n        />\n        <CardContent>{descriptionField}</CardContent>\n        <CardActions>{actionFields}</CardActions>\n      </Card>\n    </Container>\n  );\n};\n\nTask.propTypes = {\n  moveTask: PropTypes.func,\n  task: PropTypes.object,\n  isDragging: PropTypes.bool,\n  categories: PropTypes.array,\n  onSave: PropTypes.func,\n};\n\nexport default Task;\n","import React from 'react'\nimport { Typography, Grid, Box, makeStyles } from '@material-ui/core'\nimport Task from '../../../components/Task/Task'\nimport PropTypes from 'prop-types'\nimport { useDrop } from 'react-dnd'\n\nconst TaskBoardColumn = (props) => {\n  const useStyles = makeStyles({\n    column: {\n      display: 'flex',\n      flexFlow: 'column',\n      minHeight: '100vh'\n    },\n    header: {\n      boxShadow: '0 2px 3px #ccc'\n    },\n    body: {\n      boxShadow: '0 2px 3px #ccc',\n      flex: '1 1 auto'\n    }\n  })\n\n  const [, drop] = useDrop({\n    accept: 'task',\n    drop: (data) => props.moveTask(data.id, props.state),\n    collect: mon => ({\n      isOver: !!mon.isOver(),\n    }),\n  })\n\n  const classes = useStyles()\n  const tasks = props.tasks\n    .map(task => <Task\n      task={task}\n      key={task.id} \n      moveTask={props.moveTask}\n      categories={props.categories}\n      onSave={props.onSave}\n      />)\n    .reduce((arr, el) => arr.concat(el), [])\n  return (\n    <Grid item xs className={classes.column}\n    >\n      <Box\n        className={classes.header}\n        borderRight={props.borderRight ? 1 : 0}\n        borderBottom={1}\n        borderLeft={1}\n        borderTop={1}\n      >\n        <Typography align='center'>\n          {props.title}\n        </Typography>\n      </Box>\n      <Box\n        ref={drop}\n        className={classes.body}\n        borderRight={props.borderRight ? 1 : 0}\n        borderBottom={1}\n        borderLeft={1}>\n        {tasks}\n      </Box>\n    </Grid>\n  )\n}\n\nTaskBoardColumn.propTypes = {\n  borderRight: PropTypes.bool,\n  title: PropTypes.string,\n  state: PropTypes.number,\n  tasks: PropTypes.array,\n  moveTask: PropTypes.func,\n  categories: PropTypes.array,\n  onSave: PropTypes.func\n}\n\nexport default TaskBoardColumn\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Grid, CircularProgress } from \"@material-ui/core\";\nimport PropTypes from \"prop-types\";\nimport { useQuery } from \"@apollo/react-hooks\";\nimport { INIT_STATES } from \"../../graphql/queries\";\nimport TaskBoardColumn from \"./task-board-column/TaskBoardColumn\";\nimport * as actions from \"../../store/actions\";\n\nconst TaskBoard = (props) => {\n  const { loading, error, data } = useQuery(INIT_STATES);\n\n  useEffect(() => {\n    if(!loading && !error){\n      props.initStates(data.states);\n    }\n  });\n\n  const columns = props.states\n    .map((state, index) => {\n      const tasks = props.tasks.filter((t) => t.state === state.index);\n      return (\n        <TaskBoardColumn\n          key={index}\n          title={state.name}\n          state={state.index}\n          borderRight={index + 1 === props.states.length}\n          tasks={tasks}\n          categories={props.categories}\n          onSave={(task) => props.onSaved(task)}\n          moveTask={(taskId, newState) => props.onTaskMoved(taskId, newState)}\n        />\n      );\n    })\n    .reduce((arr, el) => arr.concat(el), []);\n\n  return (\n    <div>\n      {loading ? (\n        <CircularProgress />\n      ) : (\n        <Grid container spacing={0} id=\"dashboard\">\n          {columns}\n        </Grid>\n      )}\n    </div>\n  );\n};\n\nTaskBoard.propTypes = {\n  tasks: PropTypes.array,\n  onTaskMoved: PropTypes.func,\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    tasks: state.tasks,\n    states: state.states,\n    categories: state.categories,\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onTaskMoved: (taskId, newState) =>\n      dispatch(actions.moveTask(taskId, newState)),\n    onSaved: (task) => dispatch(actions.updateTask(task)),\n    initStates: (states) => dispatch(actions.initStates(states))\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TaskBoard);\n","import ApolloClient from 'apollo-boost';\n\nconst client = new ApolloClient({\n    uri: process.env.REACT_APP_GRAPHQL_URI\n});\n\nexport default client;","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nimport Layout from \"./hoc/Layout\";\nimport Auth from \"./containers/auth/Auth\";\nimport TaskBoard from \"./containers/task-board/TaskBoard\";\nimport client from './graphql/client';\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Layout>\n        <Switch>\n          <Route path=\"/auth\" exact component={Auth} />\n          <Route path=\"/\" exact component={TaskBoard} />\n        </Switch>\n      </Layout>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","import * as actionTypes from \"../actions/actionTypes\";\nimport moment from \"moment\";\n\nconst initialState = {\n  tasks: [],\n  states: [],\n  categories: [],\n  categoriesColors: [\n    \"#FF331F\",\n    \"#3626A7\",\n    \"#9c27b0\",\n    \"#673ab7\",\n    \"#009688\",\n    \"#4caf50\",\n    \"#ffeb3b\",\n    \"#ff9800\",\n    \"#795548\",\n  ],\n};\n\nconst reducer = (state = initialState, action) => {\n  var updatedTasks = [];\n  switch (action.type) {\n    case actionTypes.TASK_ADD_NEW:\n      if (action.category?.title && !action.category?.color) {\n        var newCategory = {\n          title: action.category.title,\n          color: state.categoriesColors[0],\n        };\n      }\n      var newTask = {\n        title: action.title,\n        id: Math.random(),\n        state: 0,\n        createdAt: moment(),\n        category: newCategory ? newCategory : action.category,\n        description: action.description,\n      };\n      return {\n        ...state,\n        tasks: state.tasks.concat(newTask),\n        categories: newCategory\n          ? state.categories.concat(newCategory)\n          : [...state.categories],\n        categoriesColors: newCategory\n          ? state.categoriesColors.filter((_, index) => index > 0)\n          : [...state.categoriesColors],\n      };\n    case actionTypes.TASK_MOVE:\n      if (action.newState < 0 || action.newState + 1 > state.states.length) {\n        return state;\n      }\n      updatedTasks = state.tasks.map((item) => {\n        if (item.id !== action.id) {\n          return item;\n        }\n        return {\n          ...item,\n          state: action.newState,\n        };\n      });\n      return {\n        ...state,\n        tasks: updatedTasks,\n      };\n    case actionTypes.TASK_UPDATE:\n      var newCat  = null;\n      updatedTasks = state.tasks.map((item) => {\n        if (item.id !== action.task.id) {\n          return item;\n        }\n        var category = null;\n        if (action.task.category) {\n          if (action.task.category  && !action.task.category.color) {\n            newCat = {\n              title: action.task.category.title,\n              color: state.categoriesColors[0],\n            };\n          } \n        }\n        return {\n          ...action.task,\n          category: newCat ? newCat : category,\n        };\n      });\n      return {\n        ...state,\n        tasks: updatedTasks,\n        categories: newCat\n          ? state.categories.concat(newCat)\n          : [...state.categories],\n        categoriesColors: newCat\n          ? state.categoriesColors.filter((_, index) => index > 0)\n          : [...state.categoriesColors],\n      };\n    case actionTypes.INIT_STATES:\n      return {\n        ...state,\n        states: action.states\n      }\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createMuiTheme } from '@material-ui/core/styles';\nimport deepOrange from '@material-ui/core/colors/deepOrange';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: deepOrange,\n    secondary: {\n      main: '#097df2'\n    }\n  },\n});\n\nexport default theme;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport {\n  MuiThemeProvider,\n  responsiveFontSizes,\n} from \"@material-ui/core/styles\";\nimport { Provider } from \"react-redux\";\n\nimport \"./index.css\";\nimport App from \"./App\";\nimport taskReducer from \"./store/reducers/taskReducer\";\nimport { createStore } from \"redux\";\n\nimport * as serviceWorker from \"./serviceWorker\";\nimport theme from \"./theme\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { CssBaseline } from \"@material-ui/core\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\n\nconst store = createStore(taskReducer);\n\nconst app = (\n  <Provider store={store}>\n    <DndProvider backend={HTML5Backend}>\n      <BrowserRouter basename=\"/task-board\">\n        <MuiThemeProvider theme={responsiveFontSizes(theme)}>\n          <CssBaseline />\n          <App />\n        </MuiThemeProvider>\n      </BrowserRouter>\n    </DndProvider>\n  </Provider>\n);\n\nReactDOM.render(app, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}